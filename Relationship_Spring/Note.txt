https://www.baeldung.com/spring-data-jpa-delete

=================================================
B1 >> 	One-to-One Relationship		Library > 1 : 1 < Address	<ok create/delete>
---------------------------------------------------------
@Table(name = "libraries")
public class Library {
	...
	@OneToOne
	@JoinColumn(name = "address_id")
	private Address address;
	...
}
@Table(name = "addresses")
public class Address {
	...
	@OneToOne(mappedBy = "address")
	@JsonBackReference  ## Chặn không cho Address gọi lại Library  == tránh đệ quy
	private Library library;
	...
}

=================================================
B2>> 	One-to-Many Relationship		Library > 1 : n < Books		<ok create/delete>
---------------------------------------------------------
@Table(name = "libraries")
public class Library {
	...
	@OneToOne(cascade = CascadeType.ALL)				#***#
	@JoinColumn(name = "address_id", referencedColumnName = "id")
	private Address address;
	@OneToMany(mappedBy = "library", cascade = CascadeType.ALL )	#***#
	@JsonBackReference
	private List<Book> books;
	...
}
@Table(name = "books")
public class Book {
	...
	@ManyToOne
	@JoinColumn(name = "library_id")
	private Library library;
	...
}
## Phải đảm bảo cascade = CascadeType.ALL ở Address và List<Book> mới xóa được

=================================================
B2>> 	Many-to-Many Relationship  		Author  > n - n < Book	<ok create/delete>
---------------------------------------------------------		Author  > n - 1 < Book_author > 1 - n < Book
@Entity
public class Author {
	...
	@ManyToMany(cascade = CascadeType.ALL)
	@JoinTable(name = "book_author", 
		joinColumns = @JoinColumn(name = "book_id", referencedColumnName = "id"), 
		inverseJoinColumns = @JoinColumn(name = "author_id", referencedColumnName = "id"))
	private List<Book> books;
	...
}
@Table(name = "books")
public class Book {
	...
	@ManyToMany(mappedBy = "books", fetch = FetchType.EAGER, cascade = CascadeType.ALL)
	@JsonBackReference
	private List<Author> authors;
	...
}