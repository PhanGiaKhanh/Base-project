----------------------------------------------------------------B1------------------------------------------------------------
-------------------------------------------------------------------------------------
CREATE: 	entity / PasswordResetToken   ==  VerificationToken
-------------------------------------------------------------------------------------
public class PasswordModel {
	private String email;
	private String oldPassword;
	private String newPassword;
}
---------------------------------------------------
CREATE: 	model / PasswordModel
---------------------------------------------------
public class PasswordModel {
	private String email;
	private String oldPassword;
	private String newPassword;
}
--------------------------------------------------------------------------
CREATE: 	repository / PasswordResetTokenRepository
--------------------------------------------------------------------------
@Repository
public interface PasswordResetTokenRepository extends JpaRepository<PasswordResetToken, Long> {

	PasswordResetToken findByToken(String token);
}

----------------------------------------------------------------B2----------------------------------------------------------
------------------------------------------------------------
UPDATE:	controller / RegistrationController 
------------------------------------------------------------
@Slf4j
@RestController
public class RegistrationController {
	....
	// Reset password
	@PostMapping("/resetPassword")
	public String resetPassword(@RequestBody PasswordModel passwordModel, HttpServletRequest request) {
		User user = userService.findUserByEmail(passwordModel.getEmail());
		String url = "";
		if (user != null) {
			String token = UUID.randomUUID().toString();
			userService.createPasswordResetTokenForUser(user, token);
			url = passwordResetTokenMail(user, applicationUrl(request), token);
		}
		return url;
	}
	
	// Get URL return of Reset Password and Save password
	@PostMapping("/savePassword")
	public String savePassword(@RequestParam("token") String token, @RequestBody PasswordModel passwordModel) {
		String result = userService.validatePasswordResetToken(token);
		if(!result.equalsIgnoreCase("valid")) {
			return "Invalid Token";
		}
		Optional<User> user = userService.getUserByPasswordResetToken(token);
		if (user.isPresent()) {
			userService.changePassword(user.get(), passwordModel.getNewPassword());
			return "Password reset Successfully";
		} else {
			return "Invalild Tokek";
		}
	}
	
	// Change password (check oldPassword)
	@PostMapping("/changePassword")
	public String changePassword(@RequestBody PasswordModel passwordModel) {
		User user = userService.findUserByEmail(passwordModel.getEmail());
		if (!userService.checkIfValidOldPassword(user, passwordModel.getOldPassword())) {
			return "Invalid Old Password"; 
		}
		
		// Save New password
		userService.changePassword(user, passwordModel.getNewPassword());
		return "Passowrd changed Successfly";
	}
	
	private String passwordResetTokenMail(User user, String applicationUrl, String token) {
		String url = applicationUrl + "/savePassword?token=" + token;
		log.info("Click the link to reset your Password: {}", url);
		return url;
	}
	...
}
----------------------------------------------------------------B3----------------------------------------------------------
------------------------------------------------------------
UPDATE:	controller / RegistrationController 
------------------------------------------------------------
	@Override
	public void createPasswordResetTokenForUser(User user, String token) {
		PasswordResetToken passwordResetToken = new PasswordResetToken(token, user);
		passwordResetTokenRepository.save(passwordResetToken);
	}

	@Override
	public String validatePasswordResetToken(String token) {
		PasswordResetToken passwordResetToken = passwordResetTokenRepository.findByToken(token);

		// Check Password Token exists in DB
		if (passwordResetToken == null) {
			return "invalid";
		}

		Calendar cal = Calendar.getInstance();

		// Check time limit Password Token
		if (passwordResetToken.getExpirationTime().getTime() - cal.getTime().getTime() <= 0) {
			passwordResetTokenRepository.delete(passwordResetToken);
			return "expired";
		}

		return "valid";
	}

	@Override
	public Optional<User> getUserByPasswordResetToken(String token) {
		return Optional.ofNullable(passwordResetTokenRepository.findByToken(token).getUser());
	}

	@Override
	public void changePassword(User user, String newPassword) {
		user.setPassword(passwordEncoder.encode(newPassword));
		userRepository.save(user);
	}

	@Override
	public boolean checkIfValidOldPassword(User user, String oldPassword) {
		return passwordEncoder.matches(oldPassword, user.getPassword());
	}